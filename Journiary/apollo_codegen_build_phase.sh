#!/bin/bash

# Production-Ready Apollo iOS Code Generation Build Phase
# F√ºge dieses Script als "Run Script Phase" in Xcode hinzu

# Farben f√ºr bessere Lesbarkeit
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Nur bei Clean Build oder wenn GraphQL Dateien ge√§ndert wurden
if [ "${CONFIGURATION}" = "Debug" ] || [ "${ACTION}" = "clean" ]; then
    cd "${SRCROOT}/Journiary"
    
    echo -e "${YELLOW}üîß Apollo Code-Generation Build Phase${NC}"
    
    # √úberpr√ºfe ob Schema existiert
    if [ -f "schema.graphqls" ]; then
        echo -e "${GREEN}‚úÖ GraphQL Schema gefunden${NC}"
        
        # Schema-Alter pr√ºfen (√§lter als 1 Stunde = Update empfohlen)
        if [ $(find "schema.graphqls" -mtime +0.04 | wc -l) -gt 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Schema ist √§lter als 1 Stunde - Update empfohlen${NC}"
            echo "F√ºhre './update_schema.sh' aus um das Schema zu aktualisieren"
        fi
        
        # Code-Generation erfolgt √ºber Swift Package Manager
        echo -e "${GREEN}‚úÖ Code-Generation via Swift Package Manager beim Build${NC}"
        
        # GraphQL Operations Datei √ºberpr√ºfen
        if [ -f "Journiary/GraphQL/Generated/GraphQLOperations.swift" ]; then
            echo -e "${GREEN}‚úÖ Typisierte GraphQL Operations verf√ºgbar${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  GraphQL Operations nicht gefunden - verwende String-basierte Queries${NC}"
        fi
        
        echo -e "${GREEN}‚úÖ Apollo Code erfolgreich generiert${NC}"
    else
        echo -e "${RED}‚ùå schema.graphqls nicht gefunden${NC}"
        echo "F√ºhre './update_schema.sh' aus um das Schema herunterzuladen"
        
        # Build nicht abbrechen, nur warnen
        echo -e "${YELLOW}‚ö†Ô∏è  Build wird ohne Schema fortgesetzt (Demo-Modus)${NC}"
    fi
fi 