scalar DateTime
scalar Upload

type Query {
  # Auth & User
  hello: String!
  getCurrentUser: User
  
  # Trips
  getTrips: [Trip!]!
  getTrip(id: ID!): Trip
  getTripMembers(tripId: ID!): [TripMembership!]!
  
  # Memories
  getMemories(tripId: ID): [Memory!]!
  getMemory(id: ID!): Memory
  searchMemories(query: String!, tripId: ID): [Memory!]!
  
  # Media
  getPresignedUploadUrl(filename: String!, contentType: String!): PresignedUrlResponse!
  getPresignedDownloadUrl(key: String!): PresignedUrlResponse!
  
  # Tags
  getTags: [Tag!]!
  getTagCategories: [TagCategory!]!
  
  # Sync
  getSyncData(lastSyncTimestamp: DateTime): SyncDataResponse!
}

type Mutation {
  # Auth
  login(email: String!, password: String!): LoginResponse!
  register(input: UserInput!): LoginResponse!
  refreshToken(refreshToken: String!): TokenRefreshResponse!
  updateUser(input: UpdateUserInput!): User!
  
  # Trips
  createTrip(input: TripInput!): Trip!
  updateTrip(id: ID!, input: UpdateTripInput!): Trip!
  deleteTrip(id: ID!): Boolean!
  shareTrip(tripId: ID!, email: String!, permission: Permission!): TripMembership!
  claimTrip(tripId: ID!): Trip!
  
  # Memories
  createMemory(input: MemoryInput!): Memory!
  updateMemory(id: ID!, input: UpdateMemoryInput!): Memory!
  deleteMemory(id: ID!): Boolean!
  
  # Media
  createMediaItem(input: MediaItemInput!): MediaItem!
  deleteMediaItem(id: ID!): Boolean!
  
  # Tags
  createTag(input: TagInput!): Tag!
  updateTag(id: ID!, input: UpdateTagInput!): Tag!
  deleteTag(id: ID!): Boolean!
  createTagCategory(input: TagCategoryInput!): TagCategory!
  updateTagCategory(id: ID!, input: UpdateTagCategoryInput!): TagCategory!
  deleteTagCategory(id: ID!): Boolean!
  
  # Bulk Operations
  bulkCreateTrips(input: [TripInput!]!): [Trip!]!
  bulkUpdateTrips(input: [BulkTripUpdateInput!]!): [Trip!]!
  bulkCreateMemories(input: [MemoryInput!]!): [Memory!]!
  bulkUpdateMemories(input: [BulkMemoryUpdateInput!]!): [Memory!]!
}

type Subscription {
  tripUpdated(tripId: ID!): Trip!
  memoryUpdated(tripId: ID!): Memory!
  syncStatusChanged: SyncStatus!
}

# Types
type User {
  id: ID!
  username: String!
  email: String!
  firstName: String
  lastName: String
  displayName: String!
  initials: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  trips: [Trip!]!
  memories: [Memory!]!
}

type Trip {
  id: ID!
  name: String!
  description: String
  startDate: DateTime
  endDate: DateTime
  isActive: Boolean!
  userId: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  memories: [Memory!]!
  members: [TripMembership!]!
  mediaItems: [MediaItem!]!
  routePoints: [RoutePoint!]!
}

type Memory {
  id: ID!
  title: String!
  content: String
  date: DateTime!
  latitude: Float
  longitude: Float
  address: String
  tripId: ID!
  trip: Trip!
  userId: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  mediaItems: [MediaItem!]!
  tags: [Tag!]!
}

type MediaItem {
  id: ID!
  filename: String!
  originalFilename: String!
  mimeType: String!
  fileSize: Int!
  width: Int
  height: Int
  duration: Float
  s3Key: String!
  s3Bucket: String!
  thumbnailS3Key: String
  memoryId: ID
  memory: Memory
  tripId: ID
  trip: Trip
  userId: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  metadata: MediaMetadata
}

type MediaMetadata {
  camera: String
  lens: String
  iso: Int
  aperture: Float
  shutterSpeed: String
  focalLength: Float
  gpsLatitude: Float
  gpsLongitude: Float
  gpsAltitude: Float
  dateTaken: DateTime
}

type Tag {
  id: ID!
  name: String!
  color: String
  categoryId: ID
  category: TagCategory
  userId: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  memories: [Memory!]!
}

type TagCategory {
  id: ID!
  name: String!
  color: String
  icon: String
  userId: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  tags: [Tag!]!
}

type RoutePoint {
  id: ID!
  latitude: Float!
  longitude: Float!
  altitude: Float
  accuracy: Float
  timestamp: DateTime!
  speed: Float
  heading: Float
  tripId: ID!
  trip: Trip!
  userId: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TripMembership {
  id: ID!
  tripId: ID!
  trip: Trip!
  userId: ID!
  user: User!
  permission: Permission!
  invitedBy: ID!
  invitedByUser: User!
  createdAt: DateTime!
  acceptedAt: DateTime
}

type GPXTrack {
  id: ID!
  name: String!
  filename: String!
  s3Key: String!
  s3Bucket: String!
  tripId: ID!
  trip: Trip!
  userId: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  metadata: TrackMetadata
  segments: [TrackSegment!]!
}

type TrackMetadata {
  totalDistance: Float
  totalDuration: Int
  maxSpeed: Float
  avgSpeed: Float
  totalAscent: Float
  totalDescent: Float
  minElevation: Float
  maxElevation: Float
  startTime: DateTime
  endTime: DateTime
}

type TrackSegment {
  id: ID!
  name: String
  trackId: ID!
  track: GPXTrack!
  points: [RoutePoint!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BucketListItem {
  id: ID!
  title: String!
  description: String
  latitude: Float
  longitude: Float
  address: String
  country: String
  isCompleted: Boolean!
  completedAt: DateTime
  userId: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  tags: [Tag!]!
}

# Input Types
input UserInput {
  username: String!
  email: String!
  password: String!
  firstName: String
  lastName: String
}

input UpdateUserInput {
  username: String
  email: String
  firstName: String
  lastName: String
}

input TripInput {
  name: String!
  description: String
  startDate: DateTime
  endDate: DateTime
  isActive: Boolean
}

input UpdateTripInput {
  name: String
  description: String
  startDate: DateTime
  endDate: DateTime
  isActive: Boolean
}

input BulkTripUpdateInput {
  id: ID!
  name: String
  description: String
  startDate: DateTime
  endDate: DateTime
  isActive: Boolean
  updatedAt: DateTime!
}

input MemoryInput {
  title: String!
  content: String
  date: DateTime!
  latitude: Float
  longitude: Float
  address: String
  tripId: ID!
}

input UpdateMemoryInput {
  title: String
  content: String
  date: DateTime
  latitude: Float
  longitude: Float
  address: String
}

input BulkMemoryUpdateInput {
  id: ID!
  title: String
  content: String
  date: DateTime
  latitude: Float
  longitude: Float
  address: String
  tripId: ID
  updatedAt: DateTime!
}

input MediaItemInput {
  filename: String!
  originalFilename: String!
  mimeType: String!
  fileSize: Int!
  width: Int
  height: Int
  duration: Float
  s3Key: String!
  s3Bucket: String!
  thumbnailS3Key: String
  memoryId: ID
  tripId: ID
}

input TagInput {
  name: String!
  color: String
  categoryId: ID
}

input UpdateTagInput {
  name: String
  color: String
  categoryId: ID
}

input TagCategoryInput {
  name: String!
  color: String
  icon: String
}

input UpdateTagCategoryInput {
  name: String
  color: String
  icon: String
}

input RoutePointInput {
  latitude: Float!
  longitude: Float!
  altitude: Float
  accuracy: Float
  timestamp: DateTime!
  speed: Float
  heading: Float
  tripId: ID!
}

input GPXTrackInput {
  name: String!
  filename: String!
  s3Key: String!
  s3Bucket: String!
  tripId: ID!
}

# Response Types
type LoginResponse {
  user: User!
  accessToken: String!
  refreshToken: String!
}

type TokenRefreshResponse {
  accessToken: String!
  refreshToken: String!
}

type PresignedUrlResponse {
  uploadUrl: String!
  downloadUrl: String
  key: String!
  bucket: String!
  expiresIn: Int!
}

type SyncDataResponse {
  trips: [Trip!]!
  memories: [Memory!]!
  mediaItems: [MediaItem!]!
  tags: [Tag!]!
  tagCategories: [TagCategory!]!
  routePoints: [RoutePoint!]!
  lastSyncTimestamp: DateTime!
  hasMoreData: Boolean!
}

type SyncStatus {
  isActive: Boolean!
  progress: Float!
  currentStep: String!
  estimatedTimeRemaining: Int
  error: String
}

# Enums
enum Permission {
  READ
  WRITE
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum SyncDirection {
  UPLOAD
  DOWNLOAD
  BIDIRECTIONAL
}
